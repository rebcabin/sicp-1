; modified from exercise 5.6
(define (make-fib-machine-5.11a) (make-machine

    '(n val continue)
    (list
        (list '< <)
        (list '- -)
        (list '+ +)
    )
    '(

          (assign continue (label fib-done))
        fib-loop
          (test (op <) (reg n) (const 2))
          (branch (label immediate-answer))
          ;; set up to compute Fib(n - 1)
          (save continue)
          (assign continue (label afterfib-n-1))
          (save n)                           ; save old value of n
          (assign n (op -) (reg n) (const 1)); clobber n to n - 1
          (goto (label fib-loop))            ; perform recursive call
        afterfib-n-1                         ; upon return, val contains Fib(n - 1)
          (restore n)
         ;(restore continue)                                                       
          ;; set up to compute Fib(n - 2)                                          
          (assign n (op -) (reg n) (const 2))                                      
         ;(save continue)                                                          
          (assign continue (label afterfib-n-2))
          (save val)                         ; save Fib(n - 1)
          (goto (label fib-loop))
        afterfib-n-2                         ; upon return, val contains Fib(n - 2)
        
        
     ;;;;;;;;;
     ; changed
          ;(assign n (reg val))               ; n now contains Fib(n - 2)
          ;(restore val)                      ; val now contains Fib(n - 1)
          (restore n)                        ; n now contains Fib(n - 1), and val still contains Fib(n - 2). you saved ONE asm instruction! oooooh
     ;;;;;;;;;
          
          (restore continue)
          (assign val                        ;  Fib(n - 1) +  Fib(n - 2)
                  (op +) (reg val) (reg n)) 
          (goto (reg continue))              ; return to caller, answer is in val
        immediate-answer
          (assign val (reg n))               ; base case:  Fib(n) = n
          (goto (reg continue))
        fib-done
    )

))

(load "1.19-fast-fibonnaci.scm")
(define (test-fib-5.11a n)
    ; do NOT load regsim - allows reuse of this machine factory in other files where regsim has been modified
    
    (define machine (make-fib-machine-5.11a))
    (set-register-contents! machine 'n n)
    (start machine)
    
    (let ((simulated (get-register-contents machine 'val)) (exact (fast-fib-iterative n)))
        (if (= simulated exact)
            (begin   
                (newline)
                (display "Fib (") (display n) (display ")\n")
                (display simulated)
                (display " from regsim\n")
                (display exact) 
                (display " exact\n")
            )
            (error "Fibonacci simulation error" simulated exact n)
        )
    )
    
)

(define (test-5.11a)
    (load "ch5-regsim.scm")
    (test-fib-5.11a 5)
    (test-fib-5.11a 10)
)
(test-5.11a)