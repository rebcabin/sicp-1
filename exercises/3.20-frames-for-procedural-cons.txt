Stage 0 ==============================================

Global frame G ------------------------------------
(define (cons x y)
  (define (set-x! v) (set! x v))
  (define (set-y! v) (set! y v))
  (define (dispatch m)
    (cond ((eq? m 'car) x)
          ((eq? m 'cdr) y)
          ((eq? m 'set-car!) set-x!)
          ((eq? m 'set-cdr!) set-y!)
          (else (error "Undefined operation -- CONS" m))))
  dispatch)
  
(define (car z) (z 'car))
(define (cdr z) (z 'cdr))
(define (set-car! z new-value)
  ((z 'set-car!) new-value)
  z)
(define (set-cdr! z new-value)
  ((z 'set-cdr!) new-value)
  z)
  
  
  
Stage 1 ================================================
(define x (cons 1 2))

Global frame G ----------------------------------------
cons: procedure that lives here
x: (cons 1 2)

Evaluate (cons 1 2) in new frame Ex, child of G (where cons lives)

Frame Ex (child of G): evaluating (cons 1 2) ----------
bound arguments
x: 1
y: 2

from evaluation of (cons 1 2) - these procedures live here
set-x! (Ex)
set-y! (Ex)
dispatch (Ex)

return dispatch (Ex)

Final result in global frame G --------------------------
x: dispatch (Ex)



Stage 2 ================================================
(define z (cons x x))

Global frame G ----------------------------------------
cons: procedure that lives here
x: dispatch (Ex)
z: (cons x x)

Evaluate (cons x x) in new frame Ez, child of G (where cons lives)

Frame Ez (child of G): evaluating (cons x x) ----------
bound arguments:
x: x = dispatch (Ex)
y: x = dispatch (Ex)

search for x automagically in parent frame - found in G.
(interpreter shouldn't get confused HERE...)

from evaluation of (cons x x) - these procedures live here
set-x! (Ez) - code body shared with set-x! (Ex)
set-y! (Ez) - code body shared with set-y! (Ex)
dispatch (Ez) - code body shared with dispatch (Ex)

return dispatch (Ez)

Final result in global frame G -------------------------
z: dispatch (Ez)



Stage 3a =================================================
(set-car! (cdr z) 17)

Global frame G -----------------------------------------
z: dispatch (Ez)

First need to evaluate (cdr z) in new frame E1, child of G (where cdr lives)

Frame E1 (child of G): evaluating (cdr z) ---------------
z: dispatch (Ez)

( dispatch[Ez] 'cdr )
Evaluate this in new frame Ez', child of Ez (where dispatch[Ez] lives!!)

Frame Ez' (child of Ez): evaluating (dispatch 'cdr) -----
m: 'cdr

return x
    search for x in Ez': not found
    search for x in Ez: dispatch (Ex)
    
Final result in global frame G----------------------------
(cdr z) = dispatch (Ex)



Stage 3b ==================================================
(set-car! (cdr z) 17)
(set-car! dispatch[Ex] 17)

evaluate set-car! in new frame E2, child of G (where set-car! lives)

Frame E2 -------------------------------------------------
z: dispatch[Ex]
new-value: 17

body of set-car!
((z 'set-cdr!) new-value)
First evaluate (z 'set-cdr!) in new frame Ex', child of Ex (where dispatch [Ex] lives)

    Frame Ex' -------------------------------------------------
    (dispatch[Ex] 'set-cdr!)

    return set-x!
        search for set-x! in Ex': not found
        search for set-x! in Ex: found
    
(set-x![Ex] 17)
Now evaluate this in new frame Ex'', child of Ex (where set-x![Ex] lives)

    Frame Ex'' (child of Ex) ---------------------------------
    v: 17
    (set! x v)
        search for x in Ex'': not found
        search for x in Ex: found!
        
        Frame Ex - x: 1 -> 17  - so z will now look like ((17 2) 17 2))
        
    

Stage 4 =======================================================
(car x)

x: dispatch (Ex)
z: dispatch (Ez) - but this goes unused.

(car x)
Evaluate this in frame E3, child of G, where car lives

Frame E3 ----------------------------------------------------
z: dispatch (Ex)

(z 'car)
(dispatch[Ex] 'car)

Evaluate this in frame Ex''', child of Ex, where dispatch[Ex] lives

Frame Ex''' --------------------------------------------------
m: 'car

return x
    search for x in Ex''': not found
    search for x in Ex: it's 17 (from stage 3b)
    
Final result in G --------------------------------------
(car x) = 17, QED.






  
  