Normal order (evaluate at the END)

(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))
      
(define (R a b) (remainder a b)) for concision....
      

MAN, can't you just instrument the stupid scheme code to figure this out?
Pencil/paper busywork from the 90's...
      
(gcd 206 40)
(if (= 40 0) 
    ...
    (gcd 40 (R 206 40)))
    

(gcd 40 (R 206 40))                                         ; b = 206 % 40 == 6
(if (= 0 (R 206 40))                                        ; <------ evaluation #1. condition of if statement MUST be evaluated 
    ...
    (gcd (R 206 40) (R 40 (R 206 40)))) 
    
    
(gcd (R 206 40) (R 40 (R 206 40)))                          ; b = 40 % 6 == 4
(if (= 0 (R 40 (R 206 40)))                                 ; <------ evaluations #2-3
    ...
    (gcd 
        (R 40 (R 206 40))                                   ; b
        (R  
            (R 206 40)                                      ; a
            (R 40 (R 206 40)))))                            ; b
            


(gcd 
    (R 40 (R 206 40))                                       ; a for this iteration = 4
    (R (R 206 40) (R 40 (R 206 40))))                       ; b for this iteration = 2
(if (= 0 (R (R 206 40) (R 40 (R 206 40))))                  ; <------ evaluations #4-7
    ...
    (gcd
        (R (R 206 40) (R 40 (R 206 40)))                    ; b
        (R
            (R 40 (R 206 40))                               ; a
            (R (R 206 40) (R 40 (R 206 40))))))             ; b
            

(gcd 
    (R (R 206 40) (R 40 (R 206 40)))                        ; a for this iteration = 2
    (R (R 40 (R 206 40)) (R (R 206 40) (R 40 (R 206 40))))) ; b for this iteration = 0
(if (= 0 b)                                                 ; <------ evaluations #8-14, and b == 0 finally
    (R (R 206 40) (R 40 (R 206 40)))                        ; <------ evaluations #15-18
    ...)
    
A total of 18 evaluations of (remainder) for normal order.

----------------------------------------------------------------------------------------------

Okay, how about applicative order?
(gcd 206 40)
(if (= 40 0) 
    ...
    (gcd 40 (R 206 40)))
    
(gcd 40 (R 206 40))                                         ; <------ evaluation #1
(gcd 40 6)
(if (= 6 0)
    ...
    (gcd 6 (R 40 6)))
    
(gcd 6 (R 40 6))                                            ; <------ evaluation #2
(gcd 6 4)
(if (= 4 0)
    ...
    (gcd 4 (R 6 4)))
    
(gcd 4 (R 6 4))                                             ; <------ evaluation #3
(gcd 4 2)
(if (= 2 0)
    ...
    (gcd 2 (R 4 2)))
    
(gcd 2 (R 4 2))                                             ; <------ evaluation #4
(gcd 2 0)
(if (= 0 0)
    2
    ...)
    
A total of ONLY FOUR EVALUATIONS of (remainder) for applicative order.

Okay, I get it, I get it... applicative order PRUNES THE EVALUATION TREE, 
which is VITAL for ANY sort of recursive procedure with nested function calls...